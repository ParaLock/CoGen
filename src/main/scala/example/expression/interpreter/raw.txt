// adapted manually from Bruce2003 paper, to use terms consistent with existing terminology

public interface Exp {
  double eval();
}

public class Lit implements Exp {
 public double value;
 public Lit(double value) {
   this.value = value;
 }

 public double eval() { return value; }
}

class Neg implements Exp {
  public Exp exp

  public Neg(Exp base) {
    this.base = base;
  }

  public double eval { return -exp.eval(); }
}

class Add implements Exp {
  public Exp first, second;
  public Add(Exp first, Exp second) {
    this.first = first;
    this.second = second;
  }

  public double eval() {
    return first.eval() + second.eval();
  }
}

-- new opration

public interface PrettyPExp extends Exp {
  String print();
}

public class PrettyPLitExp extends Lit implements PrettyPExp {
  public LitPrettyPExp (double value) {
    super (value);
  }

  public String print() {
    return "" + value;
  }
}


public class PrettyPNegExp extends Neg implements PrettyPExp {
  public PrettyPAddExp (PrettyPExp first, PrettyPExp second) {
    super(first, second);
  }

  public String print() {
    return "(" + ((PrettyPExp)first).print() + " - " + ((PrettyPExp)second).print() + ")";
  }
}

public class PrettyPAddExp extends Add implements PrettyPExp {
  public PrettyPAddExp (PrettyPExp first, PrettyPExp second) {
    super(first, second);
  }

  public String print() {
    return "(" + ((PrettyPExp)first).print() + " + " + ((PrettyPExp)second).print() + ")";
  }

}

---------------------------

-- new data after new operations. Two choices: Keep separate  --

public class Mult implements Exp {
  public Exp first, second;
  public Mult (Exp first, Exp second) {
    this.first = first;
    this.second = second;
  }

  public double eval() {
    return first.eval() * second.eval();
  }
}

public class PrettyPMult extends Mult implements PrettyPExp {
   public PrettyPMult (PrettyPExp first, PrettyPExp second) {
    super(first, second);
  }

  public String print() {
    return "(" + ((PrettyPExp)first).print() + " * " + ((PrettyPExp)second).print() + ")";
  }
}

-- new data after new operations. Second choices: Combine --

public class Mult implements PrettyPExp {
   public PrettyPExp first, second;
    public Mult (PrettyPExp first, PrettyPExp second) {
      this.first = first;
      this.second = second;
    }

  public double eval() {
    return first.eval() * second.eval();
  }

  public String print() {
    return "(" + ((PrettyPExp)first).print() + " * " + ((PrettyPExp)second).print() + ")";
  }
}